---
name: 'Create Azure AD Security Groups for kynsight'
on: [push]
jobs:
  Login_to_Azure:
    runs-on: ubuntu-latest

    steps: 
      - uses: actions/checkout@v4
      - name: login to azure using SP sp-kynsight-automation and create the g
        shell: pwsh
        run: |
              echo "Define the Application (Client) ID and Secret"
              # Application (Client) ID
                $ApplicationClientId = "b391290d-f79e-4d01-9045-2af456f8e56f" 
              
              # Application Secret Value
                $ApplicationClientSecret = "8_78Q~Awk4Qc_lJCCtaUgdnZrzzffXhfUNqLpc6y" 
              
              # Tenant ID
                $TenantId = "066fe1a7-14e1-4d6c-9f26-61b3da1d6f45" 
              
              # Convert the Client Secret to a Secure String
                $SecureClientSecret = ConvertTo-SecureString -String $ApplicationClientSecret -AsPlainText -Force
                echo $SecureClientSecret
 
              # Create a PSCredential Object Using the Client ID and Secure Client Secret
                $ClientSecretCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ApplicationClientId, $SecureClientSecret
                echo $ClientSecretCredential
              
              # Connect to Microsoft Graph Using the Tenant ID and Client Secret Credential
                Connect-MgGraph -TenantId $TenantId -ClientSecretCredential $ClientSecretCredential

              #Define AU ID
              # $adminUnitObj ="8074d0b0-a508-4a91-93c3-80c52cab9f5b"

              # Path to the CSV file
                $csvPath = "${{github.workspace}}/scripts/group_list.csv"
 
              # Import the CSV file
                $groups = Import-Csv -Path $csvPath
 
              # Loop through each row in the CSV and create a security group

                foreach ($group in $groups) {
                $GroupNameString = [string]$group.group
                write-host "Group Name = "$GroupNameString
                
                # $CreateGroup = New-MgGroup -DisplayName $GroupNameString -MailEnabled:$False  -MailNickName $GroupNameString -SecurityEnabled
                # $result = Get-MgGroup -Filter "displayName eq '$GroupNameString'" -Property Id, DisplayName
                # write-host "Group Name = "$result.DisplayName
                # write-host "Group ID = "$result.Id
                # $StringGroupID = [string]$result.Id
                # $odataId = "https://graph.microsoft.com/v1.0/groups/$StringGroupID"
                # New-MgDirectoryAdministrativeUnitMemberByRef -AdministrativeUnitId $adminUnitObj -OdataId $odataId
                }
